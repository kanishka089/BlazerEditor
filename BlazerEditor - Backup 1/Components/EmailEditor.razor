@using BlazerEditor.Models
@using BlazerEditor.Services
@inject HtmlExportService HtmlExportService
@inject DesignService DesignService

<div class="blazer-editor @ThemeClass" style="min-height: @(Options.MinHeight)px;">
    <div class="editor-container">
        <!-- Toolbar -->
        <div class="editor-toolbar">
            <div class="toolbar-section">
                <button class="toolbar-btn" @onclick="Undo" disabled="@(!_canUndo)" title="Undo">
                    <span class="icon">‚Ü∂</span>
                </button>
                <button class="toolbar-btn" @onclick="Redo" disabled="@(!_canRedo)" title="Redo">
                    <span class="icon">‚Ü∑</span>
                </button>
            </div>
            
            <div class="toolbar-section">
                <button class="toolbar-btn @(_previewMode == PreviewMode.Desktop ? "active" : "")" 
                        @onclick="() => SetPreviewMode(PreviewMode.Desktop)" 
                        title="Desktop Preview">
                    <span class="icon">üñ•Ô∏è</span>
                </button>
                <button class="toolbar-btn @(_previewMode == PreviewMode.Mobile ? "active" : "")" 
                        @onclick="() => SetPreviewMode(PreviewMode.Mobile)" 
                        title="Mobile Preview">
                    <span class="icon">üì±</span>
                </button>
            </div>

            <div class="toolbar-section toolbar-actions">
                @if (ShowExportButton)
                {
                    <button class="toolbar-btn toolbar-btn-primary" @onclick="HandleExport">
                        Export HTML
                    </button>
                }
                @if (ShowSaveButton)
                {
                    <button class="toolbar-btn toolbar-btn-primary" @onclick="HandleSave">
                        Save Design
                    </button>
                }
            </div>
        </div>

        <!-- Main Editor Area -->
        <div class="editor-main">
            <!-- Left Panel - Components -->
            <div class="editor-panel editor-panel-left">
                <div class="panel-header">Layouts</div>
                <div class="panel-content">
                    <div class="component-list">
                        @foreach (var layoutItem in _availableLayouts)
                        {
                            <div class="component-item layout-item" draggable="true" 
                                 @ondragstart="() => OnLayoutDragStart(layoutItem)"
                                 @ondragend="OnLayoutDragEnd">
                                <span class="component-icon">@layoutItem.Icon</span>
                                <span class="component-label">@layoutItem.Label</span>
                            </div>
                        }
                    </div>
                </div>

                <div class="panel-header" style="margin-top: 20px;">Components</div>
                <div class="panel-content">
                    <div class="component-list">
                        @foreach (var component in _availableComponents)
                        {
                            <div class="component-item" draggable="true" 
                                 @ondragstart="() => OnDragStart(component)"
                                 @ondragend="OnDragEnd">
                                <span class="component-icon">@component.Icon</span>
                                <span class="component-label">@component.Label</span>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Center - Canvas -->
            <div class="editor-canvas @GetCanvasClass()">
                <div class="canvas-wrapper">
                    <div class="email-preview" style="max-width: @(_currentDesign.Body.Values.ContentWidth);">
                        @if (_currentDesign.Body.Rows.Any())
                        {
                            @foreach (var (row, rowIndex) in _currentDesign.Body.Rows.Select((r, i) => (r, i)))
                            {
                                <div class="email-row @GetRowClass(rowIndex)" 
                                     @onclick="() => SelectRow(rowIndex)"
                                     @ondrop="() => OnDrop(rowIndex)"
                                     @ondragover="OnDragOver"
                                     @ondragover:preventDefault>
                                    
                                    @if (row.Columns.Count == 1)
                                    {
                                        <div class="email-column"
                                             @ondrop="() => OnColumnDrop(rowIndex, 0)"
                                             @ondrop:stopPropagation
                                             @ondragover="OnDragOver"
                                             @ondragover:preventDefault>
                                            @RenderColumn(row.Columns[0], rowIndex, 0)
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="email-columns">
                                            @foreach (var (column, colIndex) in row.Columns.Select((c, i) => (c, i)))
                                            {
                                                <div class="email-column" 
                                                     style="width: @(100.0 / row.Columns.Count)%;"
                                                     @ondrop="() => OnColumnDrop(rowIndex, colIndex)"
                                                     @ondrop:stopPropagation
                                                     @ondragover="OnDragOver"
                                                     @ondragover:preventDefault>
                                                    @RenderColumn(column, rowIndex, colIndex)
                                                </div>
                                            }
                                        </div>
                                    }

                                    @if (_selectedRowIndex == rowIndex)
                                    {
                                        <div class="row-actions">
                                            <button class="action-btn" @onclick="() => AddColumn(rowIndex)" @onclick:stopPropagation title="Add Column">
                                                ‚ûï Col
                                            </button>
                                            <button class="action-btn" @onclick="() => RemoveColumn(rowIndex)" @onclick:stopPropagation title="Remove Column" disabled="@(row.Columns.Count <= 1)">
                                                ‚ûñ Col
                                            </button>
                                            <button class="action-btn" @onclick="() => MoveRowUp(rowIndex)" @onclick:stopPropagation title="Move Up" disabled="@(rowIndex == 0)">
                                                ‚Üë
                                            </button>
                                            <button class="action-btn" @onclick="() => MoveRowDown(rowIndex)" @onclick:stopPropagation title="Move Down" disabled="@(rowIndex == _currentDesign.Body.Rows.Count - 1)">
                                                ‚Üì
                                            </button>
                                            <button class="action-btn" @onclick="() => DuplicateRow(rowIndex)" @onclick:stopPropagation title="Duplicate">
                                                üìã
                                            </button>
                                            <button class="action-btn" @onclick="() => DeleteRow(rowIndex)" @onclick:stopPropagation title="Delete">
                                                üóëÔ∏è
                                            </button>
                                        </div>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <div class="empty-canvas" 
                                 @ondrop="() => OnDrop(-1)"
                                 @ondragover="OnDragOver"
                                 @ondragover:preventDefault>
                                <p>Drag components here to start building your email</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Right Panel - Properties -->
            <div class="editor-panel editor-panel-right">
                <div class="panel-header">Properties</div>
                <div class="panel-content">
                    @if (_selectedContent != null)
                    {
                        <div class="properties-form">
                            @RenderContentProperties(_selectedContent)
                        </div>
                    }
                    else if (_selectedRowIndex >= 0)
                    {
                        <div class="properties-form">
                            <div class="form-group">
                                <label>Background Color</label>
                                <input type="color" @bind="_currentDesign.Body.Rows[_selectedRowIndex].Values.BackgroundColor" />
                            </div>
                            <div class="form-group">
                                <label>Padding</label>
                                <input type="text" @bind="_currentDesign.Body.Rows[_selectedRowIndex].Values.Padding" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="properties-empty">
                            <p>Select an element to edit its properties</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private RenderFragment RenderColumn(Column column, int rowIndex, int colIndex)
    {
        return @<text>
            @foreach (var (content, contentIndex) in column.Contents.Select((c, i) => (c, i)))
            {
                <!-- Drop zone before element -->
                <div class="drop-zone @GetDropZoneClass(rowIndex, colIndex, contentIndex)"
                     @ondrop="() => OnContentDrop(rowIndex, colIndex, contentIndex)"
                     @ondragover="() => OnContentDragOver(rowIndex, colIndex, contentIndex)"
                     @ondragover:preventDefault>
                </div>

                <div class="email-content @GetContentClass(rowIndex, colIndex, contentIndex)"
                     draggable="true"
                     @ondragstart="() => OnContentDragStart(rowIndex, colIndex, contentIndex)"
                     @ondragend="OnContentDragEnd"
                     @onclick="() => SelectContent(rowIndex, colIndex, contentIndex)"
                     @onclick:stopPropagation>
                    
                    <!-- Drag handle -->
                    <div class="drag-handle" title="Drag to reorder">
                        <span class="drag-icon">‚ãÆ‚ãÆ</span>
                    </div>
                    
                    @RenderContentPreview(content)
                    
                    @if (IsContentSelected(rowIndex, colIndex, contentIndex))
                    {
                        <div class="content-actions">
                            <button class="action-btn-small" @onclick="() => MoveContentUp(rowIndex, colIndex, contentIndex)" @onclick:stopPropagation title="Move Up" disabled="@(contentIndex == 0)">
                                ‚Üë
                            </button>
                            <button class="action-btn-small" @onclick="() => MoveContentDown(rowIndex, colIndex, contentIndex)" @onclick:stopPropagation title="Move Down" disabled="@(contentIndex == column.Contents.Count - 1)">
                                ‚Üì
                            </button>
                            <button class="action-btn-small" @onclick="() => DuplicateContent(rowIndex, colIndex, contentIndex)" @onclick:stopPropagation title="Duplicate">
                                üìã
                            </button>
                            <button class="action-btn-small" @onclick="() => DeleteContent(rowIndex, colIndex, contentIndex)" @onclick:stopPropagation title="Delete">
                                üóëÔ∏è
                            </button>
                        </div>
                    }
                </div>
            }
            
            <!-- Drop zone after last element -->
            <div class="drop-zone @GetDropZoneClass(rowIndex, colIndex, column.Contents.Count)"
                 @ondrop="() => OnContentDrop(rowIndex, colIndex, column.Contents.Count)"
                 @ondragover="() => OnContentDragOver(rowIndex, colIndex, column.Contents.Count)"
                 @ondragover:preventDefault>
            </div>
        </text>;
    }

    private string GetDropZoneClass(int rowIndex, int colIndex, int index)
    {
        if (_dropTargetRowIndex == rowIndex && 
            _dropTargetColumnIndex == colIndex && 
            _dropTargetIndex == index)
        {
            return "active";
        }
        return "";
    }

    private RenderFragment RenderContentPreview(Content content)
    {
        return content.Type switch
        {
            "text" => @<div class="content-text @(string.IsNullOrEmpty(content.Values.Text) || content.Values.Text.Contains("Enter your text here") ? "placeholder-text" : "")" 
                            style="font-size: @content.Values.FontSize; color: @content.Values.Color; text-align: @content.Values.TextAlign; padding: @content.Values.ContainerPadding;">
                @if (string.IsNullOrEmpty(content.Values.Text))
                {
                    <p style="color: #999;">Click to add text...</p>
                }
                else
                {
                    @((MarkupString)content.Values.Text)
                }
            </div>,
            "image" => @<div class="content-image" style="text-align: @content.Values.TextAlign; padding: @content.Values.ContainerPadding;">
                @if (content.Values.Src != null && !string.IsNullOrEmpty(content.Values.Src.Url))
                {
                    <img src="@content.Values.Src.Url" alt="@content.Values.AltText" style="max-width: @content.Values.Src.MaxWidth;" />
                }
                else
                {
                    <div class="placeholder-image">üì∑ Image</div>
                }
            </div>,
            "button" => @<div class="content-button" style="text-align: @content.Values.TextAlign; padding: @content.Values.ContainerPadding;">
                <a href="#" class="email-button" style="background-color: @(content.Values.ButtonColors?.BackgroundColor ?? "#3AAEE0"); color: @(content.Values.ButtonColors?.Color ?? "#FFFFFF");">
                    @((MarkupString)(content.Values.Text ?? "Button"))
                </a>
            </div>,
            "divider" => @<div class="content-divider" style="padding: @content.Values.ContainerPadding;">
                @if (content.Values.TextAlign == "vertical")
                {
                    <div class="vertical-divider" style="border-left: @(content.Values.FontSize ?? "2px") solid @content.Values.Color; height: 100px; margin: 0 auto; width: 0;"></div>
                }
                else
                {
                    <hr style="border: 0; border-top: @(content.Values.FontSize ?? "1px") solid @content.Values.Color; margin: 10px 0;" />
                }
            </div>,
            "column-divider" => @<div class="content-column-divider" style="padding: @content.Values.ContainerPadding;">
                <div class="vertical-divider" style="border-left: @(content.Values.FontSize ?? "2px") solid @content.Values.Color; height: @(content.Values.LineHeight ?? "150px"); margin: 0 auto; width: 0;"></div>
            </div>,
            "heading" => @<div class="content-heading @(string.IsNullOrEmpty(content.Values.Text) || content.Values.Text == "Your Heading" ? "placeholder-text" : "")" 
                              style="font-size: @content.Values.FontSize; color: @content.Values.Color; text-align: @content.Values.TextAlign; padding: @content.Values.ContainerPadding;">
                @if (string.IsNullOrEmpty(content.Values.Text))
                {
                    <h2 style="color: #999; font-style: italic;">Click to add heading...</h2>
                }
                else
                {
                    <h2>@((MarkupString)content.Values.Text)</h2>
                }
            </div>,
            "layout" => RenderNestedLayout(content),
            _ => @<div>Unknown component</div>
        };
    }

    private RenderFragment RenderContentProperties(Content content)
    {
        return @<text>
            <div class="form-group">
                <label>Padding</label>
                <input type="text" @bind="content.Values.ContainerPadding" @bind:event="oninput" />
            </div>

            @if (content.Type == "text" || content.Type == "heading")
            {
                <div class="form-group">
                    <label>Text Content</label>
                    <RichTextEditor Value="@(content.Values.Text ?? "")" 
                                    ValueChanged="@((value) => { content.Values.Text = value; StateHasChanged(); })" />
                </div>
                <div class="form-group">
                    <label>Font Size</label>
                    <input type="text" @bind="content.Values.FontSize" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Color</label>
                    <input type="color" @bind="content.Values.Color" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Text Align</label>
                    <div class="align-buttons">
                        <button type="button" 
                                class="align-btn @(content.Values.TextAlign == "left" ? "active" : "")"
                                @onclick="@(() => { content.Values.TextAlign = "left"; StateHasChanged(); })"
                                title="Align Left">
                            ‚¨Ö
                        </button>
                        <button type="button" 
                                class="align-btn @(content.Values.TextAlign == "center" ? "active" : "")"
                                @onclick="@(() => { content.Values.TextAlign = "center"; StateHasChanged(); })"
                                title="Align Center">
                            ‚Üî
                        </button>
                        <button type="button" 
                                class="align-btn @(content.Values.TextAlign == "right" ? "active" : "")"
                                @onclick="@(() => { content.Values.TextAlign = "right"; StateHasChanged(); })"
                                title="Align Right">
                            ‚û°
                        </button>
                        <button type="button" 
                                class="align-btn @(content.Values.TextAlign == "justify" ? "active" : "")"
                                @onclick="@(() => { content.Values.TextAlign = "justify"; StateHasChanged(); })"
                                title="Justify">
                            ‚¨å
                        </button>
                    </div>
                </div>
                <div class="form-group">
                    <label>Line Height</label>
                    <input type="text" @bind="content.Values.LineHeight" @bind:event="oninput" placeholder="140%" />
                </div>
            }

            @if (content.Type == "image")
            {
                <div class="form-group">
                    <label>Image URL</label>
                    <input type="text" @bind="content.Values.Src!.Url" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Alt Text</label>
                    <input type="text" @bind="content.Values.AltText" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Max Width</label>
                    <input type="text" @bind="content.Values.Src!.MaxWidth" @bind:event="oninput" />
                </div>
            }

            @if (content.Type == "button")
            {
                <div class="form-group">
                    <label>Button Text</label>
                    <input type="text" @bind="content.Values.Text" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Link URL</label>
                    <input type="text" @bind="content.Values.Href!.Values.Href" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Background Color</label>
                    <input type="color" @bind="content.Values.ButtonColors!.BackgroundColor" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Text Color</label>
                    <input type="color" @bind="content.Values.ButtonColors!.Color" @bind:event="oninput" />
                </div>
            }

            @if (content.Type == "divider")
            {
                <div class="form-group">
                    <label>Orientation</label>
                    <select @bind="content.Values.TextAlign">
                        <option value="horizontal">Horizontal</option>
                        <option value="vertical">Vertical</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Line Color</label>
                    <input type="color" @bind="content.Values.Color" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Thickness</label>
                    <select @bind="content.Values.FontSize">
                        <option value="1px">Thin (1px)</option>
                        <option value="2px">Medium (2px)</option>
                        <option value="3px">Thick (3px)</option>
                        <option value="4px">Extra Thick (4px)</option>
                    </select>
                </div>
            }

            @if (content.Type == "column-divider")
            {
                <div class="form-group">
                    <label>Line Color</label>
                    <input type="color" @bind="content.Values.Color" @bind:event="oninput" />
                </div>
                <div class="form-group">
                    <label>Thickness</label>
                    <select @bind="content.Values.FontSize">
                        <option value="1px">Thin (1px)</option>
                        <option value="2px">Medium (2px)</option>
                        <option value="3px">Thick (3px)</option>
                        <option value="4px">Extra Thick (4px)</option>
                    </select>
                </div>
                <div class="form-group">
                    <label>Height</label>
                    <input type="text" @bind="content.Values.LineHeight" @bind:event="oninput" placeholder="150px" />
                </div>
            }
        </text>;
    }

    private RenderFragment RenderNestedLayout(Content content)
    {
        if (content.Columns == null || !content.Columns.Any())
        {
            return @<div class="nested-layout-empty">Empty nested layout</div>;
        }

        return @<div class="nested-layout">
            <div class="nested-columns">
                @foreach (var (column, colIndex) in content.Columns.Select((c, i) => (c, i)))
                {
                    <div class="nested-column" 
                         style="width: @(100.0 / content.Columns.Count)%;"
                         @ondrop="() => OnNestedColumnDrop(content, colIndex)"
                         @ondrop:stopPropagation
                         @ondragover="OnDragOver"
                         @ondragover:preventDefault>
                        @foreach (var (nestedContent, nestedIndex) in column.Contents.Select((c, i) => (c, i)))
                        {
                            <div class="nested-content email-content"
                                 @onclick="() => SelectNestedContent(nestedContent)"
                                 @onclick:stopPropagation>
                                @RenderContentPreview(nestedContent)
                            </div>
                        }
                        @if (!column.Contents.Any())
                        {
                            <div class="nested-column-placeholder">Drop here</div>
                        }
                    </div>
                }
            </div>
        </div>;
    }
}
